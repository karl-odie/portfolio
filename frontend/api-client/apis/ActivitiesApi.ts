/* tslint:disable */
/* eslint-disable */
/**
 * portfolio API
 * Documentation of API endpoints of portfolio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Activity,
  ActivitySVGPoints,
  Biometrics,
} from '../models/index';
import {
    ActivityFromJSON,
    ActivityToJSON,
    ActivitySVGPointsFromJSON,
    ActivitySVGPointsToJSON,
    BiometricsFromJSON,
    BiometricsToJSON,
} from '../models/index';

export interface ActivitiesBiometricsListRequest {
    uuid: string;
}

export interface ActivitiesGeoJsonRetrieveRequest {
    uuid: string;
}

export interface ActivitiesRetrieveRequest {
    uuid: string;
}

export interface ActivitiesSvgListRequest {
    uuid: string;
}

/**
 * 
 */
export class ActivitiesApi extends runtime.BaseAPI {

    /**
     */
    async activitiesBiometricsListRaw(requestParameters: ActivitiesBiometricsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Biometrics>>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling activitiesBiometricsList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/activities/{uuid}/biometrics/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BiometricsFromJSON));
    }

    /**
     */
    async activitiesBiometricsList(requestParameters: ActivitiesBiometricsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Biometrics>> {
        const response = await this.activitiesBiometricsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async activitiesGeoJsonRetrieveRaw(requestParameters: ActivitiesGeoJsonRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling activitiesGeoJsonRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/activities/{uuid}/geo_json/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     */
    async activitiesGeoJsonRetrieve(requestParameters: ActivitiesGeoJsonRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity> {
        const response = await this.activitiesGeoJsonRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async activitiesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Activity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/activities/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityFromJSON));
    }

    /**
     */
    async activitiesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Activity>> {
        const response = await this.activitiesListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async activitiesRetrieveRaw(requestParameters: ActivitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling activitiesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/activities/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     */
    async activitiesRetrieve(requestParameters: ActivitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity> {
        const response = await this.activitiesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async activitiesSvgListRaw(requestParameters: ActivitiesSvgListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActivitySVGPoints>>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling activitiesSvgList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/activities/{uuid}/svg/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivitySVGPointsFromJSON));
    }

    /**
     */
    async activitiesSvgList(requestParameters: ActivitiesSvgListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActivitySVGPoints>> {
        const response = await this.activitiesSvgListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
